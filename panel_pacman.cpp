#include "PiDisplay.h"

#ifdef PANEL_PACMAN

int powerPillEaten = 0;

void pacClear();
void pacMan();
void drawScaredGhost( int x, int y);
void drawGhost( int x, int y, int color);
void drawPac(int x, int y, int z);


static const uint8_t blinky[]  = {
0x3, 0xc0, 0xf, 0xf0, 0x1f, 0xf8, 0x3f, 0xfc, 0x7f, 0xfe, 0x7f, 0xfe, 0x7f, 0xfe, 0xff,
0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x7b, 0xde,
0x31, 0x8c,
 };

static const uint8_t blinky2[]  ={
0x3, 0xc0, 0xf, 0xf0, 0x1f, 0xf8, 0x3f, 0xfc, 0x7f, 0xfe, 0x7f, 0xfe, 0x7f, 0xfe, 0xff,
0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xde, 0x7b,
0x8c, 0x31,
 };

static const uint8_t scared[]  = {
0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x6, 0x60, 0x6,
0x60, 0x0, 0x0, 0x0, 0x0, 0x19, 0x98, 0x26, 0x64, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
0x0, 0x0,
 };

static const uint8_t eyes1[]  = {
0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x6, 0x18, 0xf, 0x3c, 0xf, 0x3c, 0xf,
0x3c, 0x6, 0x18, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
0x0, 0x0
 };

static const uint8_t eyes2[]  = {
0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x3, 0xc, 0x3,
0xc, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
0x0, 0x0
};

static const uint8_t pac[]  = {
0x0, 0x0, 0x3, 0xe0, 0xf, 0xf8, 0x1f, 0xfc, 0x3f, 0xfe, 0x3f, 0xfe, 0x7f, 0xfc, 0x7f,
0xf0, 0x7f, 0x80, 0x7f, 0xf0, 0x7f, 0xfc, 0x3f, 0xfe, 0x3f, 0xfe, 0x1f, 0xfc, 0xf, 0xf8,
0x3, 0xe0
};

static const uint8_t pac2[]  = {
0x0, 0x0, 0x3, 0xe0, 0xf, 0xf8, 0x1f, 0xfc, 0x3f, 0xfe, 0x3f, 0xfe, 0x7f, 0xff, 0x7f,
0xf8, 0x7f, 0x80, 0x7f, 0xf8, 0x7f, 0xff, 0x3f, 0xfe, 0x3f, 0xfe, 0x1f, 0xfc, 0xf, 0xf8,
0x3, 0xe0,
 };

static const uint8_t pac3[]   = {
0x0, 0x0, 0x3, 0xe0, 0xf, 0xf8, 0x1f, 0xfc, 0x3f, 0xfe, 0x3f, 0xfe, 0x7f, 0xff, 0x7f,
0xff, 0x7f, 0xff, 0x7f, 0xff, 0x7f, 0xff, 0x3f, 0xfe, 0x3f, 0xfe, 0x1f, 0xfc, 0xf, 0xf8,
0x3, 0xe0,
 };

static const uint8_t pac_left[]   = {
0x0, 0x0, 0x7, 0xc0, 0x1f, 0xf0, 0x3f, 0xf8, 0x7f, 0xfc, 0x7f, 0xfc, 0x3f, 0xfe, 0xf,
0xfe, 0x1, 0xfe, 0xf, 0xfe, 0x3f, 0xfe, 0x7f, 0xfc, 0x7f, 0xfc, 0x3f, 0xf8, 0x1f, 0xf0,
0x7, 0xc0,
 };

static const uint8_t pac_left2[]   = {
0x0, 0x0, 0x7, 0xc0, 0x1f, 0xf0, 0x3f, 0xf8, 0x7f, 0xfc, 0x7f, 0xfc, 0xff, 0xfe, 0x1f,
0xfe, 0x1, 0xfe, 0x1f, 0xfe, 0xff, 0xfe, 0x7f, 0xfc, 0x7f, 0xfc, 0x3f, 0xf8, 0x1f, 0xf0,
0x7, 0xc0,
 };

static const uint8_t pac_left3[]   = {
0x0, 0x0, 0x7, 0xc0, 0x1f, 0xf0, 0x3f, 0xf8, 0x7f, 0xfc, 0x7f, 0xfc, 0xff, 0xfe, 0xff,
0xfe, 0xff, 0xfe, 0xff, 0xfe, 0xff, 0xfe, 0x7f, 0xfc, 0x7f, 0xfc, 0x3f, 0xf8, 0x1f, 0xf0,
0x7, 0xc0,
 };

//Runs pacman or other animation, refreshes weather data
void pacClear(){
	DEBUG("in pacClear\n");
	//refresh weather if we havent had it for 30 mins
	//or the last time we had it, it was bad,
	//or weve never had it before.
	if((millis()>lastWeatherTime+1800000) || lastWeatherTime==0 || !weatherGood) getWeather();

	if(!wasWeatherShownLast && weatherGood){
		showWeather();
		wasWeatherShownLast = true;
	}
	else{
		wasWeatherShownLast = false;

		pacMan();
	}
}


void pacMan(){
#if defined (usePACMAN)
	DEBUG("in pacMan\n");
	if(powerPillEaten>0){
		for(int i =32+(powerPillEaten*17); i>-17; i--){
			long nowish = millis();
			cls();

			drawPac(i,0,-1);
			if(powerPillEaten>0) drawScaredGhost(i-17,0);
			if(powerPillEaten>1) drawScaredGhost(i-34,0);
			if(powerPillEaten>2) drawScaredGhost(i-51,0);
			if(powerPillEaten>3) drawScaredGhost(i-68,0);

			matrix.swapBuffers(false);
			while(millis()-nowish<50)
//				Spark.process();	//Give the background process some lovin'
		}
		powerPillEaten = 0;
	}
	else{

		int hasEaten = 0;

		int powerPill = random(0,5);
		int numGhosts=random(0,4);
		if(powerPill ==0){
			if(numGhosts==0) numGhosts++;
			powerPillEaten = numGhosts;
		}

		for(int i=-17; i<32+(numGhosts*17); i++){
			cls();
			long nowish = millis();
			for(int j = 0; j<6;j++){

				if( j*5> i){
					if(powerPill==0 && j==4){
						fillCircle(canvas, j*5,8,2,Color7,3,0));
					}
					else{
						fillRect(canvas, j*5,8,2,2,Color(7,3,0));
					}
				}
			}

			if(i==19 && powerPill == 0) hasEaten=1;
			drawPac(i,0,1);
			if(hasEaten == 0){
				if(numGhosts>0) drawGhost(i-17,0,Color(3,0,3));
				if(numGhosts>1) drawGhost(i-34,0,Color(3,0,0));
				if(numGhosts>2) drawGhost(i-51,0,Color(0,3,3));
				if(numGhosts>3) drawGhost(i-68,0,Color(7,3,0));
			}
			else{
				if(numGhosts>0) drawScaredGhost(i-17-(i-19)*2,0);
				if(numGhosts>1) drawScaredGhost(i-34-(i-19)*2,0);
				if(numGhosts>2) drawScaredGhost(i-51-(i-19)*2,0);
				if(numGhosts>3) drawScaredGhost(i-68-(i-19)*2,0);
			}
			matrix.swapBuffers(false);
			while(millis()-nowish<50)
//				Spark.process();	//Give the background process some lovin'
		}
	}
#endif //usePACMAN
}

#if defined (usePACMAN)
void drawPac(int x, int y, int z){
	Color c = Color(3,3,0);
	if(x>-16 && x<32){
		if(abs(x)%4==0){
			drawBitmap(canvas, x,y,(z>0?pac:pac_left),16,16,c);
		}
		else if(abs(x)%4==1 || abs(x)%4==3){
			drawBitmap(canvas, x,y,(z>0?pac2:pac_left2),16,16,c);
		}
		else{
			drawBitmap(canvas, x,y,(z>0?pac3:pac_left3),16,16,c);
		}
	}
}

void drawGhost( int x, int y, Color color){
	if(x>-16 && x<32){
		if(abs(x)%8>3){
			drawBitmap(canvas, x,y,blinky,16,16,color);
		}
		else{
			drawBitmap(canvas, x,y,blinky2,16,16,color);
		}
		drawBitmap(canvas, x,y,eyes1,16,16,Color(3,3,3));
		drawBitmap(canvas, x,y,eyes2,16,16,Color(0,0,7));
	}
}

void drawScaredGhost( int x, int y){
	if(x>-16 && x<32){
		if(abs(x)%8>3){
			drawBitmap(canvas, x,y,blinky,16,16,matrix.Color333(0,0,7));
		}
		else{
			drawBitmap(canvas, x,y,blinky2,16,16,Color(0,0,7));
		}
		drawBitmap(canvas, x,y,scared,16,16,Color(7,3,2));
	}
}
#endif  //usePACMAN
